{"version":3,"sources":["components/card-component/card-component.js","components/board-component/board-component.js","deck.js","App.js","serviceWorker.js","index.js"],"names":["Card","handleClick","id","type","flipped","solved","height","width","disabled","className","style","onClick","alt","src","Board","dimension","cards","map","card","key","includes","initializeDeck","array","_array","slice","i","length","randomIndex","Math","floor","random","temp","shuffle","reduce","acc","push","App","useState","setCards","setFlipped","setDimension","setSolved","setDisabled","useEffect","resizeBoard","resizeListener","window","addEventListener","removeEventListener","resetCards","sameCardClicked","isMatch","clickedCard","find","min","document","documentElement","clientWidth","clientHeight","setTimeout","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.da94fab5.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport './card-component.css'\n\nexport default function Card({\n    handleClick,\n    id,\n    type,\n    flipped,\n    solved,\n    height,\n    width,\n    disabled,\n  }) {\n    return (\n      <div\n        className={`flip-conteiner ${flipped ? 'flipped' : ''}`}\n        style={{\n          width,\n          height,\n        }}\n        onClick={() => disabled ? null : handleClick(id)}\n      >\n        <div className='flipper'>\n          <img \n            style={{\n              width,\n              height,\n            }} alt = 'img'\n            className={flipped ? 'front' : 'back'}\n            src={flipped || solved ? `/img/${type}.png` : `/img/back.png`}\n          />\n        </div>\n      </div>\n    );\n}\n\nCard.propTypes = {\n    handleClick: PropTypes.func.isRequired,\n    id: PropTypes.number.isRequired,\n    flipped: PropTypes.bool.isRequired,\n    solved: PropTypes.bool.isRequired,\n    type: PropTypes.string.isRequired,\n    height: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n    disabled: PropTypes.bool.isRequired,\n\n}\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Card from '../card-component/card-component'\n\nexport default function Board({ \n   disabled, dimension, cards, flipped, solved, handleClick }) {\n    return (\n        <div className='board'>\n            {cards.map((card) => (\n                <Card\n                    key={card.id}\n                    id={card.id}\n                    type={card.type}\n                    width={dimension / 4.5}\n                    height={dimension / 4.5}\n                    flipped={flipped.includes(card.id)}\n                    solved={solved.includes(card.id)}\n                    handleClick={handleClick}\n                    disabled={disabled || solved.includes(card.id)}\n                />\n            ))}\n        </div>\n    )\n}\n\nBoard.propTypes = {\n    disabled: PropTypes.bool.isRequired,\n    dimension: PropTypes.number.isRequired,\n    cards: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n    flipped: PropTypes.arrayOf(PropTypes.number).isRequired,\n    solved: PropTypes.arrayOf(PropTypes.number).isRequired,\n    handleClick: PropTypes.func.isRequired\n}","function shuffle(array) {\n    const _array = array.slice(0)\n    for (let i = 0; i < array.length - 1; i++) {\n        let randomIndex = Math.floor(Math.random() * (i + 1))\n        let temp = _array[i]\n        _array[i] = _array[randomIndex]\n        _array[randomIndex] = temp\n    }\n    return _array\n}\n\nexport default function initializeDeck() {\n    let id = 0\n    const cards = ['react', 'javascript'].reduce((acc, type) => {\n        acc.push({\n            id: id++,\n            type\n        })\n        acc.push({\n            id: id++,\n            type\n        })\n        return acc\n    }, [])\n    return shuffle(cards)\n}\n\n","import React, { useState, useEffect } from 'react'\nimport Board from './components/board-component/board-component'\nimport initializeDeck from './deck'\n\nexport default function App() {\n  const [cards, setCards] = useState([])\n  const [flipped, setFlipped] = useState([])\n  const [dimension, setDimension] = useState(400)\n  const [solved, setSolved] = useState([])\n  const [disabled, setDisabled] = useState(false)\n\n  useEffect(() => {\n    resizeBoard()\n    setCards(initializeDeck())\n  }, [])\n\n  useEffect(() => {\n    const resizeListener = window.addEventListener('resize', resizeBoard)\n\n    return () => window.removeEventListener('resize', resizeListener)\n  })\n\n  const handleClick = (id) => {\n    setDisabled(true)\n    if (flipped.length===0) {\n    setFlipped([id])\n    setDisabled(false)\n    } else {\n      if (sameCardClicked(id)) return\n      setFlipped([flipped[0], id])\n      if (isMatch(id)) {\n        setSolved([...solved, flipped[0], id])\n        resetCards()\n      } else {\n        setTimeout(resetCards, 2000)\n      }\n    }\n  }  \n\n  const resetCards = () => {\n    setFlipped([])\n    setDisabled(false)\n  }\n\n  const sameCardClicked = (id) => flipped.includes(id)\n\n  const isMatch = (id) => {\n    const clickedCard = cards.find((card) => card.id === id)\n    const flippedCard = cards.find((card) => flipped[0] === card.id)\n    return flippedCard.type === clickedCard.type\n  }\n\n  const resizeBoard = () => {\n    setDimension(\n      Math.min(\n        document.documentElement.clientWidth,\n        document.documentElement.clientHeight,\n      ),\n    )\n  }\n\n  return (\n    <div>\n      <h1>Memory Game</h1>\n      <h2>Can you remember where this cards are?</h2>\n\n      <Board\n        dimension={dimension}\n        cards={cards}\n        flipped={flipped}\n        handleClick={handleClick}\n        disabled={disabled}\n        solved={solved}\n        />\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}